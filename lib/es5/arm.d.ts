export declare class ARMCoreArm {
    cpu: any;
    addressingMode23Immediate: any[];
    addressingMode23Register: any[];
    addressingMode2RegisterShifted: any[];
    constructor(cpu: any);
    constructAddressingMode1ASR(rs: any, rm: any): () => void;
    constructAddressingMode1Immediate(immediate: any): () => void;
    constructAddressingMode1ImmediateRotate(immediate: any, rotate: any): () => void;
    constructAddressingMode1LSL(rs: any, rm: any): () => void;
    constructAddressingMode1LSR(rs: any, rm: any): () => void;
    constructAddressingMode1ROR(rs: any, rm: any): () => void;
    constructAddressingMode23Immediate(instruction: any, immediate: any, condOp: any): any;
    constructAddressingMode23Register(instruction: any, rm: any, condOp: any): any;
    constructAddressingMode2RegisterShifted(instruction: any, shiftOp: any, condOp: any): any;
    constructAddressingMode4(immediate: any, rn: any): () => any;
    constructAddressingMode4Writeback(immediate: any, offset: any, rn: any, overlap: any): (writeInitial: any) => any;
    constructADC(rd: any, rn: any, shiftOp: any, condOp: any): () => void;
    constructADCS(rd: any, rn: any, shiftOp: any, condOp: any): () => void;
    constructADD(rd: any, rn: any, shiftOp: any, condOp: any): () => void;
    constructADDS(rd: any, rn: any, shiftOp: any, condOp: any): () => void;
    constructAND(rd: any, rn: any, shiftOp: any, condOp: any): () => void;
    constructANDS(rd: any, rn: any, shiftOp: any, condOp: any): () => void;
    constructB(immediate: any, condOp: any): () => void;
    constructBIC(rd: any, rn: any, shiftOp: any, condOp: any): () => void;
    constructBICS(rd: any, rn: any, shiftOp: any, condOp: any): () => void;
    constructBL(immediate: any, condOp: any): () => void;
    constructBX(rm: any, condOp: any): () => void;
    constructCMN(rd: any, rn: any, shiftOp: any, condOp: any): () => void;
    constructCMP(rd: any, rn: any, shiftOp: any, condOp: any): () => void;
    constructEOR(rd: any, rn: any, shiftOp: any, condOp: any): () => void;
    constructEORS(rd: any, rn: any, shiftOp: any, condOp: any): () => void;
    constructLDM(rs: any, address: any, condOp: any): () => void;
    constructLDMS(rs: any, address: any, condOp: any): () => void;
    constructLDR(rd: any, address: any, condOp: any): () => void;
    constructLDRB(rd: any, address: any, condOp: any): () => void;
    constructLDRH(rd: any, address: any, condOp: any): () => void;
    constructLDRSB(rd: any, address: any, condOp: any): () => void;
    constructLDRSH(rd: any, address: any, condOp: any): () => void;
    constructMLA(rd: any, rn: any, rs: any, rm: any, condOp: any): () => void;
    constructMLAS(rd: any, rn: any, rs: any, rm: any, condOp: any): () => void;
    constructMOV(rd: any, rn: any, shiftOp: any, condOp: any): () => void;
    constructMOVS(rd: any, rn: any, shiftOp: any, condOp: any): () => void;
    constructMRS(rd: any, r: any, condOp: any): () => void;
    constructMSR(rm: any, r: any, instruction: any, immediate: any, condOp: any): () => void;
    constructMUL(rd: any, rs: any, rm: any, condOp: any): () => void;
    constructMULS(rd: any, rs: any, rm: any, condOp: any): () => void;
    constructMVN(rd: any, rn: any, shiftOp: any, condOp: any): () => void;
    constructMVNS(rd: any, rn: any, shiftOp: any, condOp: any): () => void;
    constructORR(rd: any, rn: any, shiftOp: any, condOp: any): () => void;
    constructORRS(rd: any, rn: any, shiftOp: any, condOp: any): () => void;
    constructRSB(rd: any, rn: any, shiftOp: any, condOp: any): () => void;
    constructRSBS(rd: any, rn: any, shiftOp: any, condOp: any): () => void;
    constructRSC(rd: any, rn: any, shiftOp: any, condOp: any): () => void;
    constructRSCS(rd: any, rn: any, shiftOp: any, condOp: any): () => void;
    constructSBC(rd: any, rn: any, shiftOp: any, condOp: any): () => void;
    constructSBCS(rd: any, rn: any, shiftOp: any, condOp: any): () => void;
    constructSMLAL(rd: any, rn: any, rs: any, rm: any, condOp: any): () => void;
    constructSMLALS(rd: any, rn: any, rs: any, rm: any, condOp: any): () => void;
    constructSMULL(rd: any, rn: any, rs: any, rm: any, condOp: any): () => void;
    constructSMULLS(rd: any, rn: any, rs: any, rm: any, condOp: any): () => void;
    constructSTM(rs: any, address: any, condOp: any): () => void;
    constructSTMS(rs: any, address: any, condOp: any): () => void;
    constructSTR(rd: any, address: any, condOp: any): () => void;
    constructSTRB(rd: any, address: any, condOp: any): () => void;
    constructSTRH(rd: any, address: any, condOp: any): () => void;
    constructSUB(rd: any, rn: any, shiftOp: any, condOp: any): () => void;
    constructSUBS(rd: any, rn: any, shiftOp: any, condOp: any): () => void;
    constructSWI(immediate: any, condOp: any): () => void;
    constructSWP(rd: any, rn: any, rm: any, condOp: any): () => void;
    constructSWPB(rd: any, rn: any, rm: any, condOp: any): () => void;
    constructTEQ(rd: any, rn: any, shiftOp: any, condOp: any): () => void;
    constructTST(rd: any, rn: any, shiftOp: any, condOp: any): () => void;
    constructUMLAL(rd: any, rn: any, rs: any, rm: any, condOp: any): () => void;
    constructUMLALS(rd: any, rn: any, rs: any, rm: any, condOp: any): () => void;
    constructUMULL(rd: any, rn: any, rs: any, rm: any, condOp: any): () => void;
    constructUMULLS(rd: any, rn: any, rs: any, rm: any, condOp: any): () => void;
}
