export declare class ARMCoreThumb {
    cpu: any;
    constructor(cpu: any);
    constructADC(rd: any, rm: any): () => void;
    constructADD1(rd: any, rn: any, immediate: any): () => void;
    constructADD2(rn: any, immediate: any): () => void;
    constructADD3(rd: any, rn: any, rm: any): () => void;
    constructADD4(rd: any, rm: any): () => void;
    constructADD5(rd: any, immediate: any): () => void;
    constructADD6(rd: any, immediate: any): () => void;
    constructADD7(immediate: any): () => void;
    constructAND(rd: any, rm: any): () => void;
    constructASR1(rd: any, rm: any, immediate: any): () => void;
    constructASR2(rd: any, rm: any): () => void;
    constructB1(immediate: any, condOp: any): () => void;
    constructB2(immediate: any): () => void;
    constructBIC(rd: any, rm: any): () => void;
    constructBL1(immediate: any): () => void;
    constructBL2(immediate: any): () => void;
    constructBX(rd: any, rm: any): () => void;
    constructCMN(rd: any, rm: any): () => void;
    constructCMP1(rn: any, immediate: any): () => void;
    constructCMP2(rd: any, rm: any): () => void;
    constructCMP3(rd: any, rm: any): () => void;
    constructEOR(rd: any, rm: any): () => void;
    constructLDMIA(rn: any, rs: any): () => void;
    constructLDR1(rd: any, rn: any, immediate: any): () => void;
    constructLDR2(rd: any, rn: any, rm: any): () => void;
    constructLDR3(rd: any, immediate: any): () => void;
    constructLDR4(rd: any, immediate: any): () => void;
    constructLDRB1(rd: any, rn: any, immediate: any): () => void;
    constructLDRB2(rd: any, rn: any, rm: any): () => void;
    constructLDRH1(rd: any, rn: any, immediate: any): () => void;
    constructLDRH2(rd: any, rn: any, rm: any): () => void;
    constructLDRSB(rd: any, rn: any, rm: any): () => void;
    constructLDRSH(rd: any, rn: any, rm: any): () => void;
    constructLSL1(rd: any, rm: any, immediate: any): () => void;
    constructLSL2(rd: any, rm: any): () => void;
    constructLSR1(rd: any, rm: any, immediate: any): () => void;
    constructLSR2(rd: any, rm: any): () => void;
    constructMOV1(rn: any, immediate: any): () => void;
    constructMOV2(rd: any, rn: any, rm: any): () => void;
    constructMOV3(rd: any, rm: any): () => void;
    constructMUL(rd: any, rm: any): () => void;
    constructMVN(rd: any, rm: any): () => void;
    constructNEG(rd: any, rm: any): () => void;
    constructORR(rd: any, rm: any): () => void;
    constructPOP(rs: any, r: any): () => void;
    constructPUSH(rs: any, r: any): () => void;
    constructROR(rd: any, rm: any): () => void;
    constructSBC(rd: any, rm: any): () => void;
    constructSTMIA(rn: any, rs: any): () => void;
    constructSTR1(rd: any, rn: any, immediate: any): () => void;
    constructSTR2(rd: any, rn: any, rm: any): () => void;
    constructSTR3(rd: any, immediate: any): () => void;
    constructSTRB1(rd: any, rn: any, immediate: any): () => void;
    constructSTRB2(rd: any, rn: any, rm: any): () => void;
    constructSTRH1(rd: any, rn: any, immediate: any): () => void;
    constructSTRH2(rd: any, rn: any, rm: any): () => void;
    constructSUB1(rd: any, rn: any, immediate: any): () => void;
    constructSUB2(rn: any, immediate: any): () => void;
    constructSUB3(rd: any, rn: any, rm: any): () => void;
    constructSWI(immediate: any): () => void;
    constructTST(rd: any, rm: any): () => void;
}
