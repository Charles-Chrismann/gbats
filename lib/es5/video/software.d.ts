export declare class MemoryAligned16 {
    buffer: Uint16Array;
    constructor(size: any);
    load8(offset: any): number;
    load16(offset: any): number;
    loadU8(offset: any): number;
    loadU16(offset: any): number;
    load32(offset: any): number;
    store8(offset: any, value: any): void;
    store16(offset: any, value: any): void;
    store32(offset: any, value: any): void;
    insert(start: any, data: any): void;
    invalidatePage(address: any): void;
}
export declare class GameBoyAdvanceVRAM extends MemoryAligned16 {
    vram: any;
    constructor(size: any);
}
export declare class GameBoyAdvanceOAM extends MemoryAligned16 {
    oam: any;
    objs: any[];
    scalerot: any[];
    video: GameBoyAdvanceSoftwareRenderer;
    constructor(size: any);
    overwrite(memory: any): void;
    store16(offset: any, value: any): void;
}
export declare class GameBoyAdvancePalette {
    colors: any[][];
    adjustedColors: any[][];
    passthroughColors: any[];
    blendY: number;
    adjustColor: any;
    constructor();
    overwrite(memory: any): void;
    loadU8(offset: any): number;
    loadU16(offset: any): any;
    load16(offset: any): number;
    load32(offset: any): number;
    store16(offset: any, value: any): void;
    store32(offset: any, value: any): void;
    invalidatePage(address: any): void;
    convert16To32(value: any, input: any): void;
    mix(aWeight: any, aColor: any, bWeight: any, bColor: any): number;
    makeDarkPalettes(layers: any): void;
    makeBrightPalettes(layers: any): void;
    makeNormalPalettes(): void;
    makeSpecialPalette(layer: any): void;
    makeNormalPalette(layer: any): void;
    resetPaletteLayers(layers: any): void;
    resetPalettes(): void;
    accessColor(layer: any, index: any): any;
    adjustColorDark(color: any): number;
    adjustColorBright(color: any): number;
    setBlendY(y: any): void;
}
export declare class GameBoyAdvanceOBJ {
    TILE_OFFSET: number;
    oam: any;
    index: number;
    x: number;
    y: number;
    scalerot: number;
    doublesize: boolean | number | any;
    disable: number;
    mode: number;
    mosaic: boolean;
    multipalette: boolean;
    shape: number;
    scalerotParam: number;
    hflip: number;
    vflip: number;
    tileBase: number;
    priority: number;
    palette: number;
    drawScanline: any;
    pushPixel: any;
    cachedWidth: number;
    cachedHeight: number;
    scalerotOam: any;
    size: number;
    constructor(oam: any, index: any);
    drawScanlineNormal(backing: any, y: any, yOff: any, start: any, end: any): void;
    drawScanlineAffine(backing: any, y: any, yOff: any, start: any, end: any): void;
    recalcSize(): void;
}
export declare class GameBoyAdvanceOBJLayer {
    video: any;
    bg: boolean;
    index: number;
    priority: number;
    enabled: boolean;
    objwin: number;
    vcount: number;
    oam: any;
    constructor(video: any, index: any);
    drawScanline(backing: any, layer: any, start: any, end: any): void;
    objComparator(a: any, b: any): number;
}
export declare class GameBoyAdvanceSoftwareRenderer {
    LAYER_BG0: number;
    LAYER_BG1: number;
    LAYER_BG2: number;
    LAYER_BG3: number;
    LAYER_OBJ: number;
    LAYER_BACKDROP: number;
    HORIZONTAL_PIXELS: number;
    VERTICAL_PIXELS: number;
    LAYER_MASK: number;
    BACKGROUND_MASK: number;
    TARGET2_MASK: number;
    TARGET1_MASK: number;
    OBJWIN_MASK: number;
    WRITTEN_MASK: number;
    PRIORITY_MASK: number;
    drawBackdrop: any;
    palette: GameBoyAdvancePalette;
    vram: GameBoyAdvanceVRAM;
    oam: GameBoyAdvanceOAM;
    objLayers: GameBoyAdvanceOBJLayer[] | any;
    objwinLayer: GameBoyAdvanceOBJLayer | any;
    video: GameBoyAdvanceSoftwareRenderer;
    backgroundMode: number;
    displayFrameSelect: number;
    hblankIntervalFree: number;
    objCharacterMapping: number;
    forcedBlank: number;
    win0: number;
    win1: number;
    objwin: number | any;
    vcount: number;
    win0Left: number;
    win0Right: number;
    win1Left: number;
    win1Right: number;
    win0Top: number;
    win0Bottom: number;
    win1Top: number;
    win1Bottom: number;
    windows: any[];
    target1: any[];
    target2: any[];
    blendMode: number;
    blendA: number;
    blendB: number;
    blendY: number;
    bgMosaicX: number;
    bgMosaicY: number;
    objMosaicX: number;
    objMosaicY: number;
    lastHblank: number;
    nextHblank: number;
    nextEvent: number;
    nextHblankIRQ: number;
    nextVblankIRQ: number;
    nextVcounterIRQ: number;
    HDRAW_LENGTH: number;
    bg: any[];
    bgModes: any[];
    objwinActive: boolean;
    drawLayers: any[];
    sharedColor: number[];
    alphaEnabled: boolean;
    sharedMap: any;
    scanline: any;
    pixelData: any;
    multipalette: any;
    static multipalette: any;
    mosaic: any;
    constructor();
    clear(mmu: any): void;
    clearSubsets(mmu: any, regions: any): void;
    freeze(arg0: any): {
        palette: string;
        vram: string;
        oam: string;
    };
    defrost(frost: any, arg1: any): void;
    setBacking(backing: any): void;
    writeDisplayControl(value: any): void;
    writeBackgroundControl(bg: any, value: any): void;
    writeBackgroundHOffset(bg: any, value: any): void;
    writeBackgroundVOffset(bg: any, value: any): void;
    writeBackgroundRefX(bg: any, value: any): void;
    writeBackgroundRefY(bg: any, value: any): void;
    writeBackgroundParamA(bg: any, value: any): void;
    writeBackgroundParamB(bg: any, value: any): void;
    writeBackgroundParamC(bg: any, value: any): void;
    writeBackgroundParamD(bg: any, value: any): void;
    writeWin0H(value: any): void;
    writeWin1H(value: any): void;
    writeWin0V(value: any): void;
    writeWin1V(value: any): void;
    writeWindow(index: any, value: any): void;
    writeWinIn(value: any): void;
    writeWinOut(value: any): void;
    writeBlendControl(value: any): void;
    setBlendEnabled(layer: any, enabled: any, override: any): void;
    writeBlendAlpha(value: any): void;
    writeBlendY(value: any): void;
    writeMosaic(value: any): void;
    resetLayers(): void;
    layerComparator(a: any, b: any): number;
    accessMapMode0(base: any, size: any, x: any, yBase: any, out: any): void;
    accessMapMode1(base: any, size: any, x: any, yBase: any, out: any): void;
    accessTile(base: any, tile: any, y: any): number;
    static pushPixel(layer: any, map: any, video: any, row: any, x: any, offset: any, backing: any, mask: any, raw: any): void;
    identity(x: any): any;
    drawScanlineBlank(backing: any): void;
    prepareScanline(backing: any): void;
    drawScanlineBGMode0(backing: any, bg: any, start: any, end: any): void;
    drawScanlineBGMode2(backing: any, bg: any, start: any, end: any): void;
    drawScanlineBGMode3(backing: any, bg: any, start: any, end: any): void;
    drawScanlineBGMode4(backing: any, bg: any, start: any, end: any): void;
    drawScanlineBGMode5(backing: any, bg: any, start: any, end: any): void;
    drawScanline(y: any): void;
    finishScanline(backing: any): void;
    startDraw(): void;
    finishDraw(caller: any): void;
}
