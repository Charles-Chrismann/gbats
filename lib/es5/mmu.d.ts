import { GameBoyAdvanceGPIO } from './gpio';
import { ARMCore } from './core';
import { GameBoyAdvance } from './gba';
export declare class MemoryView {
    buffer: any;
    view: DataView;
    mask: number;
    mask8: number;
    mask16: number;
    mask32: number;
    icache: any[];
    constructor(memory: any, offset?: any);
    resetMask(): void;
    load8(offset: any): number;
    load16(offset: any): number;
    loadU8(offset: any): number;
    loadU16(offset: any): number;
    load32(offset: any): number;
    store8(offset: any, value: any): void;
    store16(offset: any, value: any): void;
    store32(offset: any, value: any): void;
    invalidatePage(address: any): void;
    replaceData(memory: any, offset: any): void;
}
export declare class MemoryBlock extends MemoryView {
    ICACHE_PAGE_BITS: number;
    PAGE_MASK: number;
    constructor(size: any, cacheBits: any);
    invalidatePage(address: any): void;
}
export declare class ROMView extends MemoryView {
    ICACHE_PAGE_BITS: number;
    PAGE_MASK: number;
    gpio: any;
    mmu: GameBoyAdvanceMMU;
    constructor(rom: any, offset?: any);
    store8(offset: any, value: any): void;
    store16(offset: any, value: any): void;
    store32(offset: any, value: any): void;
}
export declare class BIOSView extends MemoryView {
    ICACHE_PAGE_BITS: number;
    PAGE_MASK: number;
    constructor(rom: any, offset?: any);
    load8(offset: any): number;
    load16(offset: any): number;
    loadU8(offset: any): number;
    loadU16(offset: any): number;
    load32(offset: any): number;
    store8(offset: any, value: any): void;
    store16(offset: any, value: any): void;
    store32(offset: any, value: any): void;
}
export declare class BadMemory {
    cpu: ARMCore;
    mmu: GameBoyAdvanceMMU;
    constructor(mmu: any, cpu: any);
    load8(offset: any): any;
    load16(offset: any): any;
    loadU8(offset: any): any;
    loadU16(offset: any): any;
    load32(offset: any): any;
    store8(offset: any, value: any): void;
    store16(offset: any, value: any): void;
    store32(offset: any, value: any): void;
    invalidatePage(address: any): void;
}
export declare class GameBoyAdvanceMMU {
    REGION_BIOS: number;
    REGION_WORKING_RAM: number;
    REGION_WORKING_IRAM: number;
    REGION_IO: number;
    REGION_PALETTE_RAM: number;
    REGION_VRAM: number;
    REGION_OAM: number;
    REGION_CART0: number;
    REGION_CART1: number;
    REGION_CART2: number;
    REGION_CART_SRAM: number;
    BASE_BIOS: number;
    BASE_WORKING_RAM: number;
    BASE_WORKING_IRAM: number;
    BASE_IO: number;
    BASE_PALETTE_RAM: number;
    BASE_VRAM: number;
    BASE_OAM: number;
    BASE_CART0: number;
    BASE_CART1: number;
    BASE_CART2: number;
    BASE_CART_SRAM: number;
    BASE_MASK: number;
    BASE_OFFSET: number;
    OFFSET_MASK: number;
    SIZE_BIOS: number;
    SIZE_WORKING_RAM: number;
    SIZE_WORKING_IRAM: number;
    SIZE_IO: number;
    SIZE_PALETTE_RAM: number;
    SIZE_VRAM: number;
    SIZE_OAM: number;
    SIZE_CART0: number;
    SIZE_CART1: number;
    SIZE_CART2: number;
    SIZE_CART_SRAM: number;
    SIZE_CART_FLASH512: number;
    SIZE_CART_FLASH1M: number;
    SIZE_CART_EEPROM: number;
    DMA_TIMING_NOW: number;
    DMA_TIMING_VBLANK: number;
    DMA_TIMING_HBLANK: number;
    DMA_TIMING_CUSTOM: number;
    DMA_INCREMENT: number;
    DMA_DECREMENT: number;
    DMA_FIXED: number;
    DMA_INCREMENT_RELOAD: number;
    DMA_OFFSET: number[];
    WAITSTATES: number[];
    WAITSTATES_32: number[];
    WAITSTATES_SEQ: number[];
    WAITSTATES_SEQ_32: number[];
    NULLWAIT: number[];
    ROM_WS: number[];
    ROM_WS_SEQ: number[][];
    ICACHE_PAGE_BITS: number;
    PAGE_MASK: number;
    bios: null | any;
    cpu: ARMCore;
    core: GameBoyAdvance;
    save: null | any;
    memory: any;
    badMemory: BadMemory;
    waitstates: any;
    waitstatesSeq: any;
    waitstates32: any;
    waitstatesSeq32: any;
    waitstatesPrefetch: any;
    waitstatesPrefetch32: any;
    cart: null | any;
    DMA_REGISTER: number[];
    constructor();
    mmap(region: any, object: any): void;
    clear(): void;
    freeze(): {
        ram: Blob;
        iram: Blob;
    };
    defrost(frost: any): void;
    loadBios(bios: any, real: any): void;
    loadRom(rom: any, process: any): {
        title: any;
        code: any;
        maker: any;
        memory: any;
        saveType: any;
    };
    loadSavedata(save: any): void;
    load8(offset: any): any;
    load16(offset: any): any;
    load32(offset: any): any;
    loadU8(offset: any): any;
    loadU16(offset: any): any;
    store8(offset: any, value: any): void;
    store16(offset: any, value: any): void;
    store32(offset: any, value: any): void;
    waitPrefetch(memory: any): void;
    waitPrefetch32(memory: any): void;
    wait(memory: any): void;
    wait32(memory: any): void;
    waitSeq(memory: any): void;
    waitSeq32(memory: any): void;
    waitMul(rs: any): void;
    waitMulti32(memory: any, seq: any): void;
    addressToPage(region: any, address: any): number;
    accessPage(region: any, pageId: any): any;
    scheduleDma(number: any, info: any): void;
    runHblankDmas(): void;
    runVblankDmas(): void;
    serviceDma(number: any, info: any): void;
    adjustTimings(word: any): void;
    saveNeedsFlush(): any;
    flushSave(): void;
    allocGPIO(rom: any): GameBoyAdvanceGPIO;
}
