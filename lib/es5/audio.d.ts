import { ARMCore } from "./core";
import { GameBoyAdvance } from "./gba";
export declare class GameBoyAdvanceAudio {
    cpu: ARMCore;
    core: GameBoyAdvance;
    context: any;
    masterEnable: boolean;
    masterVolume: number;
    SOUND_MAX: number;
    FIFO_MAX: number;
    PSG_MAX: number;
    enabled: boolean;
    fifoA: any[];
    fifoB: any[];
    fifoASample: number;
    fifoBSample: number;
    jsAudio: any;
    enableChannel3: boolean | number;
    enableChannel4: boolean | number;
    enableChannelA: boolean | number;
    enableChannelB: boolean | number;
    enableRightChannelA: boolean | number;
    enableLeftChannelA: boolean | number;
    enableRightChannelB: boolean | number;
    enableLeftChannelB: boolean | number;
    playingChannel3: boolean | number;
    playingChannel4: boolean | number;
    volumeLeft: number;
    volumeRight: number;
    ratioChannelA: number;
    ratioChannelB: number;
    enabledLeft: number;
    enabledRight: number;
    dmaA: number;
    dmaB: number;
    soundTimerA: number;
    soundTimerB: number;
    soundRatio: number;
    soundBias: number;
    squareChannels: any[];
    waveData: Uint8Array;
    channel3Dimension: number;
    channel3Bank: number;
    channel3Volume: number;
    channel3Interval: number;
    channel3Next: number;
    channel3Length: number;
    channel3Timed: boolean;
    channel3End: number;
    channel3Pointer: number;
    channel3Sample: number;
    cpuFrequency: number;
    channel4: any;
    nextEvent: number;
    nextSample: number;
    outputPointer: number;
    samplePointer: number;
    backup: number;
    totalSamples: number;
    sampleRate: number;
    sampleInterval: number;
    resampleRatio: number;
    channel3Write: number;
    masterVolumeLeft: number;
    masterVolumeRight: number;
    buffers: ArrayBuffer;
    bufferSize: number;
    maxSamples: number;
    sampleMask: number;
    constructor();
    clear(): void;
    freeze(): {
        nextSample: number;
    };
    defrost(frost: any): void;
    pause(paused: any): void;
    updateTimers(): void;
    writeEnable(value: any): void;
    writeSoundControlLo(value: any): void;
    writeSoundControlHi(value: any): void;
    resetSquareChannel(channel: any): void;
    setSquareChannelEnabled(channel: any, enable: any): void;
    writeSquareChannelSweep(channelId: any, value: any): void;
    writeSquareChannelDLE(channelId: any, value: any): void;
    writeSquareChannelFC(channelId: any, value: any): void;
    updateSquareChannel(channel: any, cycles: any): void;
    writeChannel3Lo(value: any): void;
    writeChannel3Hi(value: any): void;
    writeChannel3X(value: any): void;
    resetChannel3(): void;
    writeWaveData(offset: any, data: any, width: any): void;
    setChannel4Enabled(enable: any): void;
    writeChannel4LE(value: any): void;
    writeChannel4FC(value: any): void;
    resetChannel4(): void;
    writeChannelLE(channel: any, value: any): void;
    updateEnvelope(channel: any, cycles?: any): void;
    appendToFifoA(value: any): void;
    appendToFifoB(value: any): void;
    sampleFifoA(): void;
    sampleFifoB(): void;
    scheduleFIFODma(number: any, info: any): void;
    sample(): void;
    audioProcess(audioProcessingEvent: any): void;
}
