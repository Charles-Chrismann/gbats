import { ARMCore } from './core';
import { GameBoyAdvance } from './gba';
import { GameBoyAdvanceSoftwareRenderer } from './video/software';
export declare class GameBoyAdvanceVideo {
    cpu: ARMCore;
    core: GameBoyAdvance;
    vblankCallback: Function;
    renderPath: GameBoyAdvanceSoftwareRenderer;
    vcount: number;
    scheduleVCaptureDma: (...args: any[]) => any;
    nextEvent: number;
    hblankIRQ: number;
    vblankIRQ: number;
    vcounterIRQ: number;
    CYCLES_PER_PIXEL: number;
    HORIZONTAL_PIXELS: number;
    HBLANK_PIXELS: number;
    HDRAW_LENGTH: number;
    HBLANK_LENGTH: number;
    HORIZONTAL_LENGTH: number;
    VERTICAL_PIXELS: number;
    VBLANK_PIXELS: number;
    VERTICAL_TOTAL_PIXELS: number;
    TOTAL_LENGTH: number;
    drawCallback: () => void;
    DISPSTAT_MASK: number;
    inHblank: boolean | any;
    inVblank: boolean | any;
    vcounter: number | any;
    vcountSetting: number;
    lastHblank: number;
    nextHblank: number;
    nextHblankIRQ: number;
    nextVblankIRQ: number;
    nextVcounterIRQ: number;
    context: any;
    constructor();
    clear(): void;
    freeze(): {
        inHblank: any;
        inVblank: any;
        vcounter: any;
        vblankIRQ: number;
        hblankIRQ: number;
        vcounterIRQ: number;
        vcountSetting: number;
        vcount: number;
        lastHblank: number;
        nextHblank: number;
        nextEvent: number;
        nextHblankIRQ: number;
        nextVblankIRQ: number;
        nextVcounterIRQ: number;
        renderPath: {
            palette: string;
            vram: string;
            oam: string;
        };
    };
    defrost(frost: any): void;
    setBacking(backing: any): void;
    updateTimers(cpu: any): void;
    writeDisplayStat(value: any): void;
    readDisplayStat(): number;
    finishDraw(pixelData: any): void;
}
