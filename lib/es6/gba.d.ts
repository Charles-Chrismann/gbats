import { ARMCore } from './core';
import { GameBoyAdvanceMMU } from './mmu';
import { GameBoyAdvanceInterruptHandler } from './irq';
import { GameBoyAdvanceIO } from './io';
import { GameBoyAdvanceAudio } from './audio';
import { GameBoyAdvanceVideo } from './video';
import { GameBoyAdvanceKeypad } from './keypad';
import { GameBoyAdvanceSIO } from './sio';
import { Canvas, SKRSContext2D } from "@napi-rs/canvas";
export declare class GameBoyAdvance {
    LOG_ERROR: number;
    LOG_WARN: number;
    LOG_STUB: number;
    LOG_INFO: number;
    LOG_DEBUG: number;
    SYS_ID: string;
    logLevel: number;
    rom: null | {
        title: any;
        code: any;
        maker: any;
        memory: any;
        saveType: any;
    };
    cpu: ARMCore;
    mmu: GameBoyAdvanceMMU;
    irq: GameBoyAdvanceInterruptHandler;
    io: GameBoyAdvanceIO;
    audio: GameBoyAdvanceAudio;
    video: GameBoyAdvanceVideo;
    keypad: GameBoyAdvanceKeypad;
    sio: GameBoyAdvanceSIO;
    doStep: () => boolean;
    paused: boolean;
    seenFrame: boolean;
    seenSave: boolean;
    lastVblank: number;
    queue: null | NodeJS.Timeout;
    reportFPS: null | Function;
    throttle: number;
    queueFrame: Function;
    indirectCanvas: Canvas;
    targetCanvas: Canvas;
    drawCallback: Function;
    context: SKRSContext2D;
    interval: number;
    constructor();
    setCanvas(canvas: Canvas): void;
    setCanvasDirect(canvas: any): void;
    setBios(bios: any, real?: any): void;
    setRom(rom: any): boolean;
    hasRom(): boolean;
    loadRomFromFile(romFile: any, callback: any): void;
    loadRom(rom: any): void;
    reset(): void;
    step(): void;
    waitFrame(): boolean;
    pause(): void;
    advanceFrame(): void;
    runStable(): void;
    setSavedata(data: any): void;
    loadSavedataFromFile(saveFile: any): void;
    decodeSavedata(string: any): void;
    decodeBase64(string: any): ArrayBuffer;
    encodeBase64(view: any): string;
    downloadSavedata(): any;
    storeSavedata(): void;
    retrieveSavedata(): boolean;
    freeze(): {
        cpu: {
            gprs: any[];
            mode: number;
            cpsrI: number | boolean;
            cpsrF: number | boolean;
            cpsrV: number | boolean;
            cpsrC: number | boolean;
            cpsrZ: number | boolean;
            cpsrN: number | boolean;
            bankedRegisters: number[][];
            spsr: number;
            bankedSPSRs: number[];
            cycles: number;
        };
        mmu: {
            ram: Blob;
            iram: Blob;
        };
        irq: {
            enable: boolean;
            enabledIRQs: number;
            interruptFlags: number;
            dma: any;
            timers: any[];
            nextEvent: number;
            springIRQ: boolean;
        };
        io: {
            registers: Blob;
        };
        audio: {
            nextSample: number;
        };
        video: {
            inHblank: any;
            inVblank: any;
            vcounter: any;
            vblankIRQ: number;
            hblankIRQ: number;
            vcounterIRQ: number;
            vcountSetting: number;
            vcount: number;
            lastHblank: number;
            nextHblank: number;
            nextEvent: number;
            nextHblankIRQ: number;
            nextVblankIRQ: number;
            nextVcounterIRQ: number;
            renderPath: {
                palette: string;
                vram: string;
                oam: string;
            };
        };
    };
    defrost(frost: any): void;
    log(level: any, message: any): void;
    setLogger(logger: any): void;
    logStackTrace(stack: any): void;
    ERROR(error: any): void;
    WARN(warn: any): void;
    STUB(func: any): void;
    INFO(info: any): void;
    DEBUG(info: any): void;
    ASSERT_UNREACHED(err: any): void;
    ASSERT(test: any, err: any): void;
}
