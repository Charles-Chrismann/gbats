import { GameBoyAdvanceAudio } from './audio';
import { ARMCore } from './core';
import { GameBoyAdvance } from './gba';
import { GameBoyAdvanceIO } from './io';
import { GameBoyAdvanceVideo } from './video';
export declare class GameBoyAdvanceInterruptHandler {
    io: GameBoyAdvanceIO;
    cpu: ARMCore;
    audio: GameBoyAdvanceAudio;
    video: GameBoyAdvanceVideo;
    core: GameBoyAdvance;
    dma: any;
    FREQUENCY: number;
    enable: boolean;
    IRQ_VBLANK: number;
    IRQ_HBLANK: number;
    IRQ_VCOUNTER: number;
    IRQ_TIMER0: number;
    IRQ_TIMER1: number;
    IRQ_TIMER2: number;
    IRQ_TIMER3: number;
    IRQ_SIO: number;
    IRQ_DMA0: number;
    IRQ_DMA1: number;
    IRQ_DMA2: number;
    IRQ_DMA3: number;
    IRQ_KEYPAD: number;
    IRQ_GAMEPAK: number;
    MASK_VBLANK: number;
    MASK_HBLANK: number;
    MASK_VCOUNTER: number;
    MASK_TIMER0: number;
    MASK_TIMER1: number;
    MASK_TIMER2: number;
    MASK_TIMER3: number;
    MASK_SIO: number;
    MASK_DMA0: number;
    MASK_DMA1: number;
    MASK_DMA2: number;
    MASK_DMA3: number;
    MASK_KEYPAD: number;
    MASK_GAMEPAK: number;
    enabledIRQs: number;
    interruptFlags: number;
    timersEnabled: number;
    timers: any[];
    nextEvent: number;
    springIRQ: boolean;
    constructor();
    clear(): void;
    freeze(): {
        enable: boolean;
        enabledIRQs: number;
        interruptFlags: number;
        dma: any;
        timers: any[];
        nextEvent: number;
        springIRQ: boolean;
    };
    defrost(frost: any): void;
    updateTimers(): void;
    resetSP(): void;
    swi32(opcode: any): void;
    swi(opcode: any): void;
    masterEnable(value: any): void;
    setInterruptsEnabled(value: any): void;
    pollNextEvent(): void;
    waitForIRQ(): boolean;
    testIRQ(): boolean;
    raiseIRQ(irqType: any): void;
    dismissIRQs(irqMask: any): void;
    dmaSetSourceAddress(dma: any, address: any): void;
    dmaSetDestAddress(dma: any, address: any): void;
    dmaSetWordCount(dma: any, count: any): void;
    dmaWriteControl(dma: any, control: any): void;
    timerSetReload(timer: any, reload: any): void;
    timerWriteControl(timer: any, control: any): void;
    timerRead(timer: any): number;
    halt(): void;
    lz77(source: any, dest: any, unitsize: any): void;
    huffman(source: any, dest: any): void;
    rl(source: any, dest: any, unitsize: any): void;
}
