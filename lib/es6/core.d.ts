import { ARMCoreArm } from './arm';
import { GameBoyAdvanceInterruptHandler } from './irq';
import { GameBoyAdvanceMMU } from './mmu';
import { ARMCoreThumb } from './thumb';
export declare class ARMCore {
    SP: number;
    LR: number;
    PC: number;
    MODE_ARM: number;
    MODE_THUMB: number;
    MODE_USER: number;
    MODE_FIQ: number;
    MODE_IRQ: number;
    MODE_SUPERVISOR: number;
    MODE_ABORT: number;
    MODE_UNDEFINED: number;
    MODE_SYSTEM: number;
    BANK_NONE: number;
    BANK_FIQ: number;
    BANK_IRQ: number;
    BANK_SUPERVISOR: number;
    BANK_ABORT: number;
    BANK_UNDEFINED: number;
    UNALLOC_MASK: number;
    USER_MASK: number;
    PRIV_MASK: number;
    STATE_MASK: number;
    WORD_SIZE_ARM: number;
    WORD_SIZE_THUMB: number;
    BASE_RESET: number;
    BASE_UNDEF: number;
    BASE_SWI: number;
    BASE_PABT: number;
    BASE_DABT: number;
    BASE_IRQ: number;
    BASE_FIQ: number;
    armCompiler: ARMCoreArm;
    thumbCompiler: ARMCoreThumb;
    gprs: Int32Array | any;
    mmu: GameBoyAdvanceMMU;
    irq: GameBoyAdvanceInterruptHandler;
    step: Function;
    loadInstruction: Function;
    execMode: number;
    instructionWidth: number;
    mode: number;
    cpsrI: boolean | number;
    cpsrF: boolean | number;
    cpsrV: boolean | number;
    cpsrC: boolean | number;
    cpsrZ: boolean | number;
    cpsrN: boolean | number;
    bankedRegisters: Int32Array[];
    spsr: number;
    bankedSPSRs: Int32Array;
    cycles: number;
    shifterOperand: number;
    shifterCarryOut: number | boolean;
    page: null | any;
    pageId: number;
    pageRegion: number;
    instruction: null | any;
    pageMask: any;
    conditionPassed: any;
    conds: any;
    WARN: (arg0: string) => void;
    constructor();
    resetCPU(startOffset: any): void;
    freeze(): {
        gprs: any[];
        mode: number;
        cpsrI: number | boolean;
        cpsrF: number | boolean;
        cpsrV: number | boolean;
        cpsrC: number | boolean;
        cpsrZ: number | boolean;
        cpsrN: number | boolean;
        bankedRegisters: number[][];
        spsr: number;
        bankedSPSRs: number[];
        cycles: number;
    };
    defrost(frost: any): void;
    fetchPage(address: any): void;
    loadInstructionArm(address: any): any;
    loadInstructionThumb(address: any): any;
    selectBank(mode: any): number;
    switchExecMode(newMode: any): void;
    switchMode(newMode: any): void;
    packCPSR(): number;
    unpackCPSR(spsr: any): void;
    hasSPSR(): boolean;
    raiseIRQ(): void;
    raiseTrap(): void;
    badOp(instruction: any): any;
    generateConds(): void;
    barrelShiftImmediate(shiftType: any, immediate: any, rm: any): (instruction: any) => any;
    compileArm(instruction: any): any;
    compileThumb(instruction: any): any;
}
