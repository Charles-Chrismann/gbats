export class MemoryProxy {
    constructor(owner: any, size: any, blockSize: any);
    owner: any;
    blocks: MemoryView[];
    blockSize: any;
    mask: number;
    size: any;
    combine(): any;
    replace(buffer: any): void;
    load8(offset: any): number;
    load16(offset: any): number;
    loadU8(offset: any): number;
    loadU16(offset: any): number;
    load32(offset: any): number;
    store8(offset: any, value: any): void;
    store16(offset: any, value: any): void;
    store32(offset: any, value: any): void;
    invalidatePage(address: any): void;
}
export class GameBoyAdvanceRenderProxy {
    worker: Worker;
    currentFrame: number;
    delay: number;
    skipFrame: boolean;
    dirty: any;
    memoryDirtied(mem: any, block: any): void;
    clear(mmu: any): void;
    palette: MemoryProxy;
    vram: MemoryProxy;
    oam: MemoryProxy;
    scanlineQueue: any[];
    freeze(encodeBase64: any): {
        palette: Blob;
        vram: Blob;
        oam: Blob;
    };
    defrost(frost: any, decodeBase64: any): void;
    writeDisplayControl(value: any): void;
    writeBackgroundControl(bg: any, value: any): void;
    writeBackgroundHOffset(bg: any, value: any): void;
    writeBackgroundVOffset(bg: any, value: any): void;
    writeBackgroundRefX(bg: any, value: any): void;
    writeBackgroundRefY(bg: any, value: any): void;
    writeBackgroundParamA(bg: any, value: any): void;
    writeBackgroundParamB(bg: any, value: any): void;
    writeBackgroundParamC(bg: any, value: any): void;
    writeBackgroundParamD(bg: any, value: any): void;
    writeWin0H(value: any): void;
    writeWin1H(value: any): void;
    writeWin0V(value: any): void;
    writeWin1V(value: any): void;
    writeWinIn(value: any): void;
    writeWinOut(value: any): void;
    writeBlendControl(value: any): void;
    writeBlendAlpha(value: any): void;
    writeBlendY(value: any): void;
    writeMosaic(value: any): void;
    clearSubsets(mmu: any, regions: any): void;
    setBacking(backing: any): void;
    backing: any;
    drawScanline(y: any): void;
    startDraw(): void;
    finishDraw(caller: any): void;
    caller: any;
}
import { MemoryView } from '../mmu.js';
import { Worker } from 'node:worker_threads';
